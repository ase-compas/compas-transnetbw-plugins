// tslint:disable
/**
 * CoMPAS SCL Data Archiving API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import { of } from 'rxjs';
import { ajax } from 'rxjs/ajax';
import { map, concatMap } from 'rxjs/operators';
import { servers } from './servers';
export const BASE_PATH = servers[0].getUrl();
export class Configuration {
    constructor(configuration = {}) {
        this.configuration = configuration;
    }
    get basePath() {
        var _a;
        return (_a = this.configuration.basePath) !== null && _a !== void 0 ? _a : BASE_PATH;
    }
    get middleware() {
        var _a;
        return (_a = this.configuration.middleware) !== null && _a !== void 0 ? _a : [];
    }
    get username() {
        return this.configuration.username;
    }
    get password() {
        return this.configuration.password;
    }
    get apiKey() {
        const { apiKey } = this.configuration;
        return apiKey ? (typeof apiKey === 'string' ? () => apiKey : apiKey) : undefined;
    }
    get accessToken() {
        const { accessToken } = this.configuration;
        return accessToken ? (typeof accessToken === 'string' ? () => accessToken : accessToken) : undefined;
    }
}
/**
 * This is the base class for all generated API classes.
 */
export class BaseAPI {
    constructor(configuration = new Configuration()) {
        this.configuration = configuration;
        this.middleware = [];
        this.withMiddleware = (middlewares) => {
            const next = this.clone();
            next.middleware = next.middleware.concat(middlewares);
            return next;
        };
        this.withPreMiddleware = (preMiddlewares) => this.withMiddleware(preMiddlewares.map((pre) => ({ pre })));
        this.withPostMiddleware = (postMiddlewares) => this.withMiddleware(postMiddlewares.map((post) => ({ post })));
        this.createRequestArgs = ({ url: baseUrl, query, method, headers, body, responseType }) => {
            // only add the queryString to the URL if there are query parameters.
            // this is done to avoid urls ending with a '?' character which buggy webservers
            // do not handle correctly sometimes.
            const url = `${this.configuration.basePath}${baseUrl}${query && Object.keys(query).length ? `?${queryString(query)}` : ''}`;
            return {
                url,
                method,
                headers,
                body: body instanceof FormData ? body : JSON.stringify(body),
                responseType: responseType !== null && responseType !== void 0 ? responseType : 'json',
            };
        };
        this.rxjsRequest = (params) => of(params).pipe(map((request) => {
            this.middleware.filter((item) => item.pre).forEach((mw) => (request = mw.pre(request)));
            return request;
        }), concatMap((args) => ajax(args).pipe(map((response) => {
            this.middleware.filter((item) => item.post).forEach((mw) => (response = mw.post(response)));
            return response;
        }))));
        /**
         * Create a shallow clone of `this` by constructing a new instance
         * and then shallow cloning data members.
         */
        this.clone = () => Object.assign(Object.create(Object.getPrototypeOf(this)), this);
        this.middleware = configuration.middleware;
    }
    request(requestOpts, responseOpts) {
        return this.rxjsRequest(this.createRequestArgs(requestOpts)).pipe(map((res) => {
            const { status, response } = res;
            if (status >= 200 && status < 300) {
                return (responseOpts === null || responseOpts === void 0 ? void 0 : responseOpts.response) === 'raw' ? res : response;
            }
            throw res;
        }));
    }
}
/**
 * @deprecated
 * export for not being a breaking change
 */
export class RequiredError extends Error {
    constructor() {
        super(...arguments);
        this.name = 'RequiredError';
    }
}
export const COLLECTION_FORMATS = {
    csv: ',',
    ssv: ' ',
    tsv: '\t',
    pipes: '|',
};
export const encodeURI = (value) => encodeURIComponent(`${value}`);
const queryString = (params) => Object.entries(params)
    .map(([key, value]) => value instanceof Array
    ? value.map((val) => `${encodeURI(key)}=${encodeURI(val)}`).join('&')
    : `${encodeURI(key)}=${encodeURI(value)}`)
    .join('&');
export const throwIfNullOrUndefined = (value, paramName, nickname) => {
    if (value == null) {
        throw new Error(`Parameter "${paramName}" was null or undefined when calling "${nickname}".`);
    }
};
//# sourceMappingURL=runtime.js.map