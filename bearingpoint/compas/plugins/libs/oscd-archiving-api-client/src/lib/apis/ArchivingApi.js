// tslint:disable
/**
 * CoMPAS SCL Data Archiving API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import { BaseAPI, throwIfNullOrUndefined, encodeURI } from '../runtime';
/**
 * no description
 */
export class ArchivingApi extends BaseAPI {
    archiveResource({ id, version, xAuthor, xApprover, contentType, xFilename, body }, opts) {
        throwIfNullOrUndefined(id, 'id', 'archiveResource');
        throwIfNullOrUndefined(version, 'version', 'archiveResource');
        const headers = Object.assign(Object.assign(Object.assign(Object.assign({ 'Content-Type': 'application/octet-stream' }, (xAuthor != null ? { 'X-author': String(xAuthor) } : undefined)), (xApprover != null ? { 'X-approver': String(xApprover) } : undefined)), (contentType != null ? { 'Content-Type': String(contentType) } : undefined)), (xFilename != null ? { 'X-filename': String(xFilename) } : undefined));
        return this.request({
            url: '/api/archive/referenced-resource/{id}/versions/{version}'.replace('{id}', encodeURI(id)).replace('{version}', encodeURI(version)),
            method: 'POST',
            headers,
            body: body,
        }, opts === null || opts === void 0 ? void 0 : opts.responseOpts);
    }
    ;
    archiveSclResource({ id, version }, opts) {
        throwIfNullOrUndefined(id, 'id', 'archiveSclResource');
        throwIfNullOrUndefined(version, 'version', 'archiveSclResource');
        const headers = {};
        return this.request({
            url: '/api/archive/scl/{id}/versions/{version}'.replace('{id}', encodeURI(id)).replace('{version}', encodeURI(version)),
            method: 'POST',
            headers,
        }, opts === null || opts === void 0 ? void 0 : opts.responseOpts);
    }
    ;
    retrieveArchivedResourceHistory({ id }, opts) {
        throwIfNullOrUndefined(id, 'id', 'retrieveArchivedResourceHistory');
        const headers = {};
        return this.request({
            url: '/api/archive/resources/{id}/versions'.replace('{id}', encodeURI(id)),
            method: 'GET',
            headers,
        }, opts === null || opts === void 0 ? void 0 : opts.responseOpts);
    }
    ;
    searchArchivedResources({ archivedResourcesSearch }, opts) {
        const headers = {
            'Content-Type': 'application/json',
        };
        return this.request({
            url: '/api/archive/resources/search',
            method: 'POST',
            headers,
            body: archivedResourcesSearch,
        }, opts === null || opts === void 0 ? void 0 : opts.responseOpts);
    }
    ;
}
//# sourceMappingURL=ArchivingApi.js.map