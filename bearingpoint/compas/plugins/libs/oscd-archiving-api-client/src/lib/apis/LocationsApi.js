// tslint:disable
/**
 * CoMPAS SCL Data Archiving API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import { BaseAPI, throwIfNullOrUndefined, encodeURI } from '../runtime';
/**
 * no description
 */
export class LocationsApi extends BaseAPI {
    assignResourceToLocation({ locationId, uuid }, opts) {
        throwIfNullOrUndefined(locationId, 'locationId', 'assignResourceToLocation');
        throwIfNullOrUndefined(uuid, 'uuid', 'assignResourceToLocation');
        const headers = {};
        return this.request({
            url: '/api/locations/{locationId}/resources/{uuid}/assign'.replace('{locationId}', encodeURI(locationId)).replace('{uuid}', encodeURI(uuid)),
            method: 'POST',
            headers,
        }, opts === null || opts === void 0 ? void 0 : opts.responseOpts);
    }
    ;
    createLocation({ location }, opts) {
        throwIfNullOrUndefined(location, 'location', 'createLocation');
        const headers = {
            'Content-Type': 'application/json',
        };
        return this.request({
            url: '/api/locations',
            method: 'POST',
            headers,
            body: location,
        }, opts === null || opts === void 0 ? void 0 : opts.responseOpts);
    }
    ;
    deleteLocation({ locationId }, opts) {
        throwIfNullOrUndefined(locationId, 'locationId', 'deleteLocation');
        const headers = {};
        return this.request({
            url: '/api/locations/{locationId}'.replace('{locationId}', encodeURI(locationId)),
            method: 'DELETE',
            headers,
        }, opts === null || opts === void 0 ? void 0 : opts.responseOpts);
    }
    ;
    getLocation({ locationId }, opts) {
        throwIfNullOrUndefined(locationId, 'locationId', 'getLocation');
        const headers = {};
        return this.request({
            url: '/api/locations/{locationId}'.replace('{locationId}', encodeURI(locationId)),
            method: 'GET',
            headers,
        }, opts === null || opts === void 0 ? void 0 : opts.responseOpts);
    }
    ;
    getLocations({ page, pageSize }, opts) {
        const headers = {};
        const query = {};
        if (page != null) {
            query['page'] = page;
        }
        if (pageSize != null) {
            query['pageSize'] = pageSize;
        }
        return this.request({
            url: '/api/locations',
            method: 'GET',
            headers,
            query,
        }, opts === null || opts === void 0 ? void 0 : opts.responseOpts);
    }
    ;
    unassignResourceFromLocation({ locationId, uuid }, opts) {
        throwIfNullOrUndefined(locationId, 'locationId', 'unassignResourceFromLocation');
        throwIfNullOrUndefined(uuid, 'uuid', 'unassignResourceFromLocation');
        const headers = {};
        return this.request({
            url: '/api/locations/{locationId}/resources/{uuid}/unassign'.replace('{locationId}', encodeURI(locationId)).replace('{uuid}', encodeURI(uuid)),
            method: 'POST',
            headers,
        }, opts === null || opts === void 0 ? void 0 : opts.responseOpts);
    }
    ;
    updateLocation({ locationId, location }, opts) {
        throwIfNullOrUndefined(locationId, 'locationId', 'updateLocation');
        throwIfNullOrUndefined(location, 'location', 'updateLocation');
        const headers = {
            'Content-Type': 'application/json',
        };
        return this.request({
            url: '/api/locations/{locationId}'.replace('{locationId}', encodeURI(locationId)),
            method: 'PUT',
            headers,
            body: location,
        }, opts === null || opts === void 0 ? void 0 : opts.responseOpts);
    }
    ;
}
//# sourceMappingURL=LocationsApi.js.map